"""
Follow-up Handler Service
Handles keyword detection and response generation for post-analysis follow-up messages.
"""

import re
from typing import Dict, List, Tuple, Optional
from app.services.mongo_db import get_recent_messages
from app.services.gemini_api import get_treatment_followup

class FollowUpHandler:
    """
    Handles detection and response for follow-up keywords after crop analysis.
    """
    
    def __init__(self):
        # Define keyword mappings for different intents (8 categories)
        self.intent_keywords = {
            "treatment": {
                "english": ["treatment", "detailed solution", "treat", "cure", "remedy", "fix", "heal", "solution"],
                "hindi": ["рдЙрдкрдЪрд╛рд░", "рдЗрд▓рд╛рдЬ", "рд╕рдорд╛рдзрд╛рди", "рдЪрд┐рдХрд┐рддреНрд╕рд╛", "рдЙрдкрд╛рдп"]
            },
            "prevention": {
                "english": ["prevention", "protection", "prevent", "avoid", "stop", "protect", "precaution", "safety"],
                "hindi": ["рд░реЛрдХрдерд╛рдо", "рдмрдЪрд╛рд╡", "рд╕реБрд░рдХреНрд╖рд╛", "рдмрдЪрдирд╛", "рд░реЛрдХрдирд╛", "рд╕рд╛рд╡рдзрд╛рдиреА"]
            },
            "medicine": {
                "english": ["medicine", "pesticide", "medication", "drug", "spray", "fungicide", "chemical", "insecticide"],
                "hindi": ["рджрд╡рд╛", "рдХреАрдЯрдирд╛рд╢рдХ", "рджрд╡рд╛рдИ", "рдЫрд┐рдбрд╝рдХрд╛рд╡", "рд░рд╕рд╛рдпрди", "рдХреЗрдорд┐рдХрд▓", "рд╕реНрдкреНрд░реЗ"]
            },
            "dosage": {
                "english": ["dosage", "quantity", "amount", "dose", "measurement", "calculation"],
                "hindi": ["рдЦреБрд░рд╛рдХ", "рдорд╛рддреНрд░рд╛", "рдбреЛрдЬ", "рдирд╛рдк", "рдкрд░рд┐рдорд╛рдг"]
            },
            "cost": {
                "english": ["cost", "budget", "price", "expense", "money", "rate", "charges"],
                "hindi": ["рдХреАрдордд", "рд▓рд╛рдЧрдд", "рдЦрд░реНрдЪ", "рджрд╛рдо", "рд░реЗрдЯ", "рдкреИрд╕рд╛"]
            },
            "management": {
                "english": ["management", "care", "farming", "cultivation", "maintenance", "handling"],
                "hindi": ["рдкреНрд░рдмрдВрдзрди", "рджреЗрдЦрднрд╛рд▓", "рдЦреЗрддреА", "рд░рдЦрд░рдЦрд╛рд╡", "рд╕рдВрднрд╛рд▓"]
            },
            "timing": {
                "english": ["timing", "calendar", "schedule", "time", "when", "period", "duration"],
                "hindi": ["рд╕рдордп", "рдХреИрд▓реЗрдВрдбрд░", "рдЯрд╛рдЗрдорд┐рдВрдЧ", "рдХрдм", "рдЕрд╡рдзрд┐", "рд╕рдордпрд╕рд╛рд░рдгреА"]
            },
            "emergency": {
                "english": ["urgent", "emergency", "immediate", "asap", "critical", "serious", "help"],
                "hindi": ["рддреБрд░рдВрдд", "рдЖрдкрд╛рддрдХрд╛рд▓", "рдЬрд░реВрд░реА", "рдЧрдВрднреАрд░", "рдорджрдж", "рдЗрдорд░рдЬреЗрдВрд╕реА"]
            }
        }
        
        # Define response templates for all 8 categories
        self.response_templates = {
            "treatment": {
                "intro": "ЁЯТК **рд╡рд┐рд╕реНрддреГрдд рдЙрдкрдЪрд╛рд░ рдЧрд╛рдЗрдб (Detailed Treatment Guide):**\n",
                "detailed_request": True  # Will use Gemini API for detailed response
            },
            "prevention": {
                "intro": "ЁЯЫбя╕П **рднрд╡рд┐рд╖реНрдп рдореЗрдВ рдмрдЪрд╛рд╡ (Future Prevention):**\n",
                "content": [
                    "ЁЯФН **рдирд┐рдпрдорд┐рдд рдирд┐рдЧрд░рд╛рдиреА (Regular Monitoring):**",
                    "тАв рд╣рд░ 7-10 рджрд┐рди рдореЗрдВ рдЦреЗрдд рдХреА рдЬрд╛рдВрдЪ рдХрд░реЗрдВ (Inspect field every 7-10 days)",
                    "тАв рд╕реБрдмрд╣-рд╢рд╛рдо рдкрддреНрддрд┐рдпреЛрдВ рдХреА рдЬрд╛рдВрдЪ (Check leaves morning-evening)",
                    "",
                    "ЁЯМ▒ **рдлрд╕рд▓ рд╕реНрд╡рд╛рд╕реНрдереНрдп (Crop Health):**",
                    "тАв рдкреМрдзреЛрдВ рдХреЗ рдмреАрдЪ рдЙрдЪрд┐рдд рджреВрд░реА (Proper plant spacing)",
                    "тАв рдЕрдЪреНрдЫреА рдЬрд▓ рдирд┐рдХрд╛рд╕реА рд╡реНрдпрд╡рд╕реНрдерд╛ (Good drainage system)",
                    "тАв рдлрд╕рд▓ рдЪрдХреНрд░ рдЕрдкрдирд╛рдПрдВ (Practice crop rotation)",
                    "",
                    "ЁЯМ┐ **рдкреНрд░рд╛рдХреГрддрд┐рдХ рдмрдЪрд╛рд╡ (Natural Protection):**",
                    "тАв рд░реЛрдЧ рдкреНрд░рддрд┐рд░реЛрдзреА рдХрд┐рд╕реНрдореЗрдВ рдЙрдЧрд╛рдПрдВ (Use resistant varieties)",
                    "тАв рдЦреЗрдд рдХреА рд╕рдлрд╛рдИ рдмрдирд╛рдП рд░рдЦреЗрдВ (Maintain field hygiene)",
                    "тАв рдореМрд╕рдо рдХреА рдирд┐рдЧрд░рд╛рдиреА рдХрд░реЗрдВ (Monitor weather conditions)"
                ]
            },
            "medicine": {
                "intro": "ЁЯзк **рджрд╡рд╛ рдХреА рдкреВрд░реА рдЬрд╛рдирдХрд╛рд░реА (Complete Medicine Information):**\n",
                "content": [
                    "тП░ **рдЫрд┐рдбрд╝рдХрд╛рд╡ рдХрд╛ рд╕рдордп (Application Time):**",
                    "тАв рд╕реБрдмрд╣ 6-8 рдмрдЬреЗ рдпрд╛ рд╢рд╛рдо 4-6 рдмрдЬреЗ (6-8 AM or 4-6 PM)",
                    "тАв рд╣рд╡рд╛ рдХрдо рд╣реЛ рдФрд░ рдзреВрдк рддреЗрдЬ рди рд╣реЛ (Low wind, mild sunlight)",
                    "",
                    "ЁЯТз **рдорд┐рд╢реНрд░рдг рддреИрдпрд╛рд░ рдХрд░рдирд╛ (Preparation):**",
                    "тАв рд╕рд╛рдл рдкрд╛рдиреА рдХрд╛ рдЗрд╕реНрддреЗрдорд╛рд▓ рдХрд░реЗрдВ (Use clean water)",
                    "тАв рдкрд╣рд▓реЗ рджрд╡рд╛, рдлрд┐рд░ рдкрд╛рдиреА рдорд┐рд▓рд╛рдПрдВ (Add chemical first, then water)",
                    "тАв рддреБрд░рдВрдд рдЗрд╕реНрддреЗрдорд╛рд▓ рдХрд░реЗрдВ (Use immediately)",
                    "",
                    "ЁЯж║ **рд╕реБрд░рдХреНрд╖рд╛ рдЙрдкрд╛рдп (Safety Measures):**",
                    "тАв рдорд╛рд╕реНрдХ, рджрд╕реНрддрд╛рдиреЗ рдкрд╣рдиреЗрдВ (Wear mask, gloves)",
                    "тАв рдмрд╛рд░рд┐рд╢ рд╕реЗ рдкрд╣рд▓реЗ рди рдЫрд┐рдбрд╝рдХреЗрдВ (Don't spray before rain)",
                    "тАв рдардВрдбреА рдЬрдЧрд╣ рд╕реНрдЯреЛрд░ рдХрд░реЗрдВ (Store in cool place)"
                ]
            },
            "dosage": {
                "intro": "ЁЯзо **рдЦреБрд░рд╛рдХ рдХреИрд▓рдХреБрд▓реЗрдЯрд░ (Dosage Calculator):**\n",
                "detailed_request": True  # Will calculate based on field size and crop
            },
            "cost": {
                "intro": "ЁЯТ░ **рд▓рд╛рдЧрдд рдХреА рдЬрд╛рдирдХрд╛рд░реА (Cost Information):**\n",
                "content": [
                    "ЁЯТ│ **рдЕрдиреБрдорд╛рдирд┐рдд рдЦрд░реНрдЪ (Estimated Cost):**",
                    "тАв рджрд╡рд╛ рдХреА рдХреАрдордд: тВ╣200-800 рдкреНрд░рддрд┐ рдПрдХрдбрд╝ (Medicine: тВ╣200-800/acre)",
                    "тАв рдЫрд┐рдбрд╝рдХрд╛рд╡ рдЦрд░реНрдЪ: тВ╣100-200 рдкреНрд░рддрд┐ рдПрдХрдбрд╝ (Spraying: тВ╣100-200/acre)",
                    "тАв рдХреБрд▓ рд▓рд╛рдЧрдд: тВ╣300-1000 рдкреНрд░рддрд┐ рдПрдХрдбрд╝ (Total: тВ╣300-1000/acre)",
                    "",
                    "ЁЯУК **рд▓рд╛рдЧрдд рдХреА рддреБрд▓рдирд╛ (Cost Comparison):**",
                    "тАв рдЬреИрд╡рд┐рдХ рдЙрдкрдЪрд╛рд░: 20-30% рд╕рд╕реНрддрд╛ (Organic: 20-30% cheaper)",
                    "тАв рд░рд╕рд╛рдпрдирд┐рдХ рдЙрдкрдЪрд╛рд░: рддрддреНрдХрд╛рд▓ рдкреНрд░рднрд╛рд╡ (Chemical: Immediate effect)",
                    "тАв рдорд┐рд╢реНрд░рд┐рдд рджреГрд╖реНрдЯрд┐рдХреЛрдг: рд╕рдВрддреБрд▓рд┐рдд рд▓рд╛рдЧрдд (Mixed: Balanced cost)",
                    "",
                    "ЁЯТб **рдмрдЪрдд рдХреЗ рддрд░реАрдХреЗ (Cost Saving Tips):**",
                    "тАв рд╕рд╛рдореВрд╣рд┐рдХ рдЦрд░реАрджрд╛рд░реА рдХрд░реЗрдВ (Group purchasing)",
                    "тАв рд╕рд░рдХрд╛рд░реА рд╕рдмреНрд╕рд┐рдбреА рдХреА рдЬрд╛рдВрдЪ рдХрд░реЗрдВ (Check govt. subsidies)"
                ]
            },
            "management": {
                "intro": "ЁЯМ╛ **рдлрд╕рд▓ рдкреНрд░рдмрдВрдзрди (Crop Management):**\n",
                "content": [
                    "ЁЯУЕ **рджреИрдирд┐рдХ рджреЗрдЦрднрд╛рд▓ (Daily Care):**",
                    "тАв рд╕реБрдмрд╣-рд╢рд╛рдо рдкрд╛рдиреА рдХреА рдЬрд╛рдВрдЪ (Check water AM/PM)",
                    "тАв рдкрддреНрддрд┐рдпреЛрдВ рдХрд╛ рд░рдВрдЧ рджреЗрдЦреЗрдВ (Monitor leaf color)",
                    "тАв рдХреАрдЯ-рдкрддрдВрдЧреЛрдВ рдХреА рдирд┐рдЧрд░рд╛рдиреА (Watch for pests)",
                    "",
                    "ЁЯМ┐ **рд╕рд╛рдкреНрддрд╛рд╣рд┐рдХ рдХрд╛рд░реНрдп (Weekly Tasks):**",
                    "тАв рдЦрд░рдкрддрд╡рд╛рд░ рд╣рдЯрд╛рдирд╛ (Weed removal)",
                    "тАв рдорд┐рдЯреНрдЯреА рдХреА рдирдореА рдЬрд╛рдВрдЪрдирд╛ (Soil moisture check)",
                    "тАв рдкреЛрд╖рдХ рддрддреНрд╡реЛрдВ рдХреА рдЖрдкреВрд░реНрддрд┐ (Nutrient supply)",
                    "",
                    "ЁЯУК **рдорд╛рд╕рд┐рдХ рдореВрд▓реНрдпрд╛рдВрдХрди (Monthly Assessment):**",
                    "тАв рдлрд╕рд▓ рдХреА рд╡реГрджреНрдзрд┐ рджрд░ (Growth rate)",
                    "тАв рдЙрддреНрдкрд╛рджрди рдХрд╛ рдЕрдиреБрдорд╛рди (Yield estimation)",
                    "тАв рдмрд╛рдЬрд╝рд╛рд░ рдХреА рдХреАрдорддреЛрдВ рдХреА рдЬрд╛рдирдХрд╛рд░реА (Market prices)"
                ]
            },
            "timing": {
                "intro": "тП░ **рд╕рдордп рд╕рд╛рд░рдгреА (Schedule & Timing):**\n",
                "detailed_request": True  # Will create detailed schedule based on crop and season
            },
            "emergency": {
                "intro": "ЁЯЖШ **рдЖрдкрд╛рддрдХрд╛рд▓реАрди рд╕рд╣рд╛рдпрддрд╛ (Emergency Help):**\n",
                "content": [
                    "ЁЯЪи **рддрддреНрдХрд╛рд▓ рдХрд╛рд░реНрд░рд╡рд╛рдИ (Immediate Action):**",
                    "тАв рдкреНрд░рднрд╛рд╡рд┐рдд рд╣рд┐рд╕реНрд╕реЗ рдХреЛ рдЕрд▓рдЧ рдХрд░реЗрдВ (Isolate affected area)",
                    "тАв рдЫрд┐рдбрд╝рдХрд╛рд╡ рддреБрд░рдВрдд рдмрдВрдж рдХрд░реЗрдВ (Stop spraying immediately)",
                    "тАв рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рд╕реЗ рддреБрд░рдВрдд рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ (Contact expert immediately)",
                    "",
                    "ЁЯУЮ **рдЖрдкрд╛рддрдХрд╛рд▓реАрди рд╕рдВрдкрд░реНрдХ (Emergency Contacts):**",
                    "тАв рдХреГрд╖рд┐ рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ: +91 85188 00080",
                    "тАв рдЬрд┐рд▓рд╛ рдХреГрд╖рд┐ рдЕрдзрд┐рдХрд╛рд░реА рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ",
                    "тАв рдирдЬрджреАрдХреА рдХреГрд╖рд┐ рд╕реЗрд╡рд╛ рдХреЗрдВрджреНрд░ рдЬрд╛рдПрдВ",
                    "",
                    "тЪб **24 рдШрдВрдЯреЗ рдХреА рджреЗрдЦрднрд╛рд▓ (24-Hour Care):**",
                    "тАв рд╣рд░ 2 рдШрдВрдЯреЗ рдореЗрдВ рдЬрд╛рдВрдЪ рдХрд░реЗрдВ (Check every 2 hours)",
                    "тАв рдкрд╛рдиреА рдХреА рдЖрдкреВрд░реНрддрд┐ рдмрдирд╛рдП рд░рдЦреЗрдВ (Maintain water supply)",
                    "тАв рдлреЛрдЯреЛ рдЦреАрдВрдЪрдХрд░ рдкреНрд░рдЧрддрд┐ рдЯреНрд░реИрдХ рдХрд░реЗрдВ (Track progress with photos)"
                ]
            }
        }

    def detect_follow_up_context(self, user_id: str, limit: int = 10) -> bool:
        """
        Check if user recently received follow-up options after crop analysis.
        Returns True if follow_up_msg was sent in recent conversation.
        """
        recent_messages = get_recent_messages(user_id, limit=limit)
        
        for msg in reversed(recent_messages):
            if (msg.get('is_bot', False) and 
                ('ЁЯОп **[translate:рдФрд░ рднреА рдЬрд╛рдирдХрд╛рд░реА рдЪрд╛рд╣рд┐рдП' in msg.get('message', '') or
                 'ЁЯМЯ **[translate:рдЖрдкрдХреА рд╕рдорд╕реНрдпрд╛ рдХрд╛ рд╕рдорд╛рдзрд╛рди рдорд┐рд▓ рдЧрдпрд╛ рд╣реИ' in msg.get('message', '') or
                 'ЁЯТм Aur jaankari ke liye puchiye' in msg.get('message', ''))):  # Backward compatibility
                return True
        
        return False

    def detect_intent(self, message: str) -> Optional[str]:
        """
        Detect user intent from message based on keywords.
        Returns: 'treatment', 'prevention', 'medicine', or None
        """
        message_lower = message.lower().strip()
        
        # Check each intent
        for intent, keywords in self.intent_keywords.items():
            # Check English keywords
            for keyword in keywords["english"]:
                if keyword in message_lower:
                    return intent
            
            # Check Hindi keywords
            for keyword in keywords["hindi"]:
                if keyword in message_lower:
                    return intent
        
        return None

    def generate_response(self, intent: str, crop_type: str = "", disease: str = "", user_id: str = "") -> str:
        """
        Generate appropriate response based on detected intent.
        """
        if intent not in self.response_templates:
            return self._get_fallback_response()
        
        template = self.response_templates[intent]
        response = template["intro"]
        
        # Handle detailed AI-powered responses
        if template.get("detailed_request") and crop_type and user_id:
            try:
                if intent == "treatment":
                    # Use existing Gemini API for detailed treatment
                    detailed_info = get_treatment_followup(disease, crop_type, user_id)
                    response += detailed_info
                elif intent == "dosage":
                    # Generate dosage calculator response
                    response += self._generate_dosage_calculator(crop_type, disease)
                elif intent == "timing":
                    # Generate detailed timing schedule
                    response += self._generate_timing_schedule(crop_type, disease)
                else:
                    response += self._get_detailed_fallback(intent, crop_type)
            except Exception as e:
                response += self._get_detailed_fallback(intent, crop_type)
        
        # Handle predefined content responses
        elif "content" in template:
            for item in template["content"]:
                response += f"{item}\n"
        
        # Add general helpful footer
        response += self._get_response_footer(intent)
        
        return response

    def _get_treatment_fallback(self, crop_type: str) -> str:
        """Fallback treatment response if AI fails."""
        return (
            f"**{crop_type} рдХреЗ рд▓рд┐рдП рд╕рд╛рдорд╛рдиреНрдп рдЙрдкрдЪрд╛рд░:**\n"
            "тАв Identify the exact disease/pest\n"
            "тАв Apply appropriate fungicide/pesticide\n"
            "тАв Maintain proper field hygiene\n"
            "тАв Monitor progress after treatment\n"
        )

    def _generate_dosage_calculator(self, crop_type: str, disease: str) -> str:
        """Generate dosage calculation based on crop and disease."""
        return (
            f"**{crop_type} рдХреЗ рд▓рд┐рдП рдЦреБрд░рд╛рдХ рдЧрдгрдирд╛ (Dosage Calculation for {crop_type}):**\n"
            "\nЁЯУП **рдЦреЗрдд рдХрд╛ рдХреНрд╖реЗрддреНрд░рдлрд▓ (Field Area):**\n"
            "тАв 1 рдПрдХрдбрд╝ рдХреЗ рд▓рд┐рдП (For 1 acre): 200-300 рд▓реА. рдкрд╛рдиреА\n"
            "тАв 1 рдмреАрдШрд╛ рдХреЗ рд▓рд┐рдП (For 1 bigha): 80-120 рд▓реА. рдкрд╛рдиреА\n"
            "\nя┐╜ **рджрд╡рд╛ рдХреА рдорд╛рддреНрд░рд╛ (Medicine Quantity):**\n"
            "тАв рдХрд╡рдХрдирд╛рд╢реА (Fungicide): 2-3 рдЧреНрд░рд╛рдо рдкреНрд░рддрд┐ рд▓реАрдЯрд░\n"
            "тАв рдХреАрдЯрдирд╛рд╢реА (Insecticide): 1-2 рдорд┐рд▓реА рдкреНрд░рддрд┐ рд▓реАрдЯрд░\n"
            "тАв рдкреМрд╖реНрдЯрд┐рдХ рддрддреНрд╡ (Nutrients): 5-10 рдЧреНрд░рд╛рдо рдкреНрд░рддрд┐ рд▓реАрдЯрд░\n"
            "\nтЪЦя╕П **рдорд┐рд╢реНрд░рдг рдЕрдиреБрдкрд╛рдд (Mixing Ratio):**\n"
            "тАв рдкрд╣рд▓реЗ рдкрд╛рдиреА, рдлрд┐рд░ рджрд╡рд╛ рдорд┐рд▓рд╛рдПрдВ\n"
            "тАв рдзреАрд░реЗ-рдзреАрд░реЗ рд╣рд┐рд▓рд╛рддреЗ рд░рд╣реЗрдВ\n"
            "тАв 30 рдорд┐рдирдЯ рдХреЗ рдЕрдВрджрд░ рдЗрд╕реНрддреЗрдорд╛рд▓ рдХрд░реЗрдВ\n"
        )

    def _generate_timing_schedule(self, crop_type: str, disease: str) -> str:
        """Generate detailed timing schedule for treatment."""
        return (
            f"**{crop_type} рдХреЗ рд▓рд┐рдП рд╕рдордп рд╕рд╛рд░рдгреА (Schedule for {crop_type}):**\n"
            "\nЁЯУЕ **рд╕рд╛рдкреНрддрд╛рд╣рд┐рдХ рдХрд╛рд░реНрдпрдХреНрд░рдо (Weekly Schedule):**\n"
            "тАв **рд╕реЛрдорд╡рд╛рд░**: рдЦреЗрдд рдХреА рдЬрд╛рдВрдЪ, рдХреАрдЯ рдирд┐рдЧрд░рд╛рдиреА\n"
            "тАв **рдмреБрдзрд╡рд╛рд░**: рдЫрд┐рдбрд╝рдХрд╛рд╡ (рдпрджрд┐ рдЖрд╡рд╢реНрдпрдХ рд╣реЛ)\n"
            "тАв **рд╢реБрдХреНрд░рд╡рд╛рд░**: рдкреЛрд╖рдХ рддрддреНрд╡ рдкреНрд░рдмрдВрдзрди\n"
            "тАв **рд░рд╡рд┐рд╡рд╛рд░**: рд╕рд╛рдкреНрддрд╛рд╣рд┐рдХ рд░рд┐рдкреЛрд░реНрдЯ рддреИрдпрд╛рд░ рдХрд░рдирд╛\n"
            "\nЁЯХТ **рджреИрдирд┐рдХ рд╕рдордп (Daily Timing):**\n"
            "тАв **рд╕реБрдмрд╣ 6-8 рдмрдЬреЗ**: рдирд┐рд░реАрдХреНрд╖рдг рдФрд░ рдкрд╛рдиреА рджреЗрдирд╛\n"
            "тАв **рд╢рд╛рдо 4-6 рдмрдЬреЗ**: рдЫрд┐рдбрд╝рдХрд╛рд╡ (рдпрджрд┐ рдЖрд╡рд╢реНрдпрдХ)\n"
            "тАв **рд░рд╛рдд 8-9 рдмрдЬреЗ**: рдЕрдЧрд▓реЗ рджрд┐рди рдХреА рдпреЛрдЬрдирд╛\n"
            "\nтП│ **рдЙрдкрдЪрд╛рд░ рдХреА рдЕрд╡рдзрд┐ (Treatment Duration):**\n"
            "тАв рддрддреНрдХрд╛рд▓ рд░рд╛рд╣рдд: 3-5 рджрд┐рди\n"
            "тАв рдкреВрд░реНрдг рдЙрдкрдЪрд╛рд░: 10-15 рджрд┐рди\n"
            "тАв рдкреБрдирд░рд╛рд╡реГрддреНрддрд┐ рд░реЛрдХрдерд╛рдо: 21-30 рджрд┐рди\n"
        )

    def _get_detailed_fallback(self, intent: str, crop_type: str) -> str:
        """Fallback for detailed requests when AI fails."""
        fallbacks = {
            "dosage": f"{crop_type} рдХреЗ рд▓рд┐рдП рдорд╛рдирдХ рдЦреБрд░рд╛рдХ рдХреА рдЬрд╛рдирдХрд╛рд░реА рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ рд╣реИред рдХреГрдкрдпрд╛ рд╕реНрдерд╛рдиреАрдп рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВред",
            "timing": f"{crop_type} рдХреЗ рд▓рд┐рдП рд╕рд╛рдорд╛рдиреНрдп рд╕рдордп рд╕рд╛рд░рдгреА: рд╕реБрдмрд╣ рдирд┐рд░реАрдХреНрд╖рдг, рджрд┐рди рдореЗрдВ рджреЗрдЦрднрд╛рд▓, рд╢рд╛рдо рдХреЛ рдЙрдкрдЪрд╛рд░ред",
        }
        return fallbacks.get(intent, f"{crop_type} рдХреЗ рд▓рд┐рдП рд╡рд┐рд╕реНрддреГрдд рдЬрд╛рдирдХрд╛рд░реА рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ рд╣реИред")

    def _get_response_footer(self, intent: str) -> str:
        """Add helpful footer to responses."""
        footers = {
            "treatment": "\nЁЯУЮ **рд╡реНрдпрдХреНрддрд┐рдЧрдд рд╕рд▓рд╛рд╣**: +91 85188 00080",
            "prevention": "\nЁЯМ▒ **рдпрд╛рдж рд░рдЦреЗрдВ**: рд░реЛрдХрдерд╛рдо рдЗрд▓рд╛рдЬ рд╕реЗ рдмреЗрд╣рддрд░ рд╣реИ!",
            "medicine": "\nтЪая╕П **рд╕рд╛рд╡рдзрд╛рдиреА**: рд╡рд┐рд╢рд┐рд╖реНрдЯ рдЦреБрд░рд╛рдХ рдХреЗ рд▓рд┐рдП рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рд╕реЗ рд╕рд▓рд╛рд╣ рд▓реЗрдВ",
            "dosage": "\nЁЯзо **рдиреЛрдЯ**: рдЦреЗрдд рдХреЗ рдЖрдХрд╛рд░ рдХреЗ рдЕрдиреБрд╕рд╛рд░ рдорд╛рддреНрд░рд╛ рд╕рдорд╛рдпреЛрдЬрд┐рдд рдХрд░реЗрдВ",
            "cost": "\nЁЯТб **рд╕реБрдЭрд╛рд╡**: рд╕рд╛рдореВрд╣рд┐рдХ рдЦрд░реАрджрд╛рд░реА рд╕реЗ рдмрдЪрдд рдХрд░реЗрдВ",
            "management": "\nЁЯУК **рдЯреНрд░реИрдХрд┐рдВрдЧ**: рджреИрдирд┐рдХ рдкреНрд░рдЧрддрд┐ рдХрд╛ рд░рд┐рдХреЙрд░реНрдб рд░рдЦреЗрдВ",
            "timing": "\nтП░ **рд▓рдЪреАрд▓рд╛рдкрди**: рдореМрд╕рдо рдХреЗ рдЕрдиреБрд╕рд╛рд░ рд╕рдордп рдмрджрд▓реЗрдВ",
            "emergency": "\nЁЯЖШ **24/7 рд╣реЗрд▓реНрдкрд▓рд╛рдЗрди**: +91 85188 00080"
        }
        return footers.get(intent, "\nЁЯТЪ **рдЦреБрд╢ рдХрд┐рд╕рд╛рдиреА**: рд╕рдлрд▓ рдЦреЗрддреА рдХреА рд╢реБрднрдХрд╛рдордирд╛рдПрдВ!")

    def _get_fallback_response(self) -> str:
        """Fallback response when intent is not detected."""
        return (
            "ЁЯдФ **[translate:рдореИрдВ рдЖрдкрдХреА рдмрд╛рдд рд╕рдордЭ рдирд╣реАрдВ рдкрд╛рдпрд╛]** (I didn't understand your request)\n\n"
            "ЁЯОп **[translate:рдХреГрдкрдпрд╛ рдЗрдирдореЗрдВ рд╕реЗ рдХреЛрдИ рд╢рдмреНрдж рдЯрд╛рдЗрдк рдХрд░реЗрдВ]** (Please type one of these words):\n\n"
            
            "ЁЯТК **рдЙрдкрдЪрд╛рд░**: 'рдЙрдкрдЪрд╛рд░' рдпрд╛ 'treatment'\n"
            "ЁЯЫбя╕П **рдмрдЪрд╛рд╡**: 'рд░реЛрдХрдерд╛рдо' рдпрд╛ 'prevention'\n"
            "ЁЯзк **рджрд╡рд╛**: 'рджрд╡рд╛' рдпрд╛ 'medicine'\n"
            "ЁЯзо **рдЦреБрд░рд╛рдХ**: 'рдЦреБрд░рд╛рдХ' рдпрд╛ 'dosage'\n"
            "ЁЯТ░ **рдХреАрдордд**: 'рдХреАрдордд' рдпрд╛ 'cost'\n"
            "ЁЯМ╛ **рдкреНрд░рдмрдВрдзрди**: 'рдкреНрд░рдмрдВрдзрди' рдпрд╛ 'management'\n"
            "тП░ **рд╕рдордп**: 'рд╕рдордп' рдпрд╛ 'timing'\n"
            "ЁЯЖШ **рддреБрд░рдВрдд**: 'рддреБрд░рдВрдд' рдпрд╛ 'urgent'\n\n"
            
            "ЁЯУЮ **[translate:рд╡реНрдпрдХреНрддрд┐рдЧрдд рд╕рд╣рд╛рдпрддрд╛]**: +91 85188 00080"
        )

    def should_handle_message(self, user_id: str, message: str) -> Tuple[bool, Optional[str]]:
        """
        Determine if this message should be handled as a follow-up.
        Returns: (should_handle, detected_intent)
        """
        # Check if user is in follow-up context
        if not self.detect_follow_up_context(user_id):
            return False, None
        
        # Detect intent
        intent = self.detect_intent(message)
        
        return intent is not None, intent

    def get_last_analysis_info(self, user_id: str) -> Dict[str, str]:
        """
        Get information about the last crop analysis for context.
        Returns dict with crop_type and disease info.
        """
        recent_messages = get_recent_messages(user_id, limit=15)
        
        crop_type = ""
        disease = ""
        
        # Look for recent analysis results
        for msg in reversed(recent_messages):
            message_text = msg.get('message', '')
            
            # Extract crop type from analysis
            if 'Crop Type:' in message_text or 'рдлрд╕рд▓:' in message_text:
                lines = message_text.split('\n')
                for line in lines:
                    if 'Crop Type:' in line or 'рдлрд╕рд▓:' in line:
                        crop_type = line.split(':')[-1].strip()
                        break
            
            # Extract disease info
            if 'Disease:' in message_text or 'рдмреАрдорд╛рд░реА:' in message_text:
                lines = message_text.split('\n')
                for line in lines:
                    if 'Disease:' in line or 'рдмреАрдорд╛рд░реА:' in line:
                        disease = line.split(':')[-1].strip()
                        break
        
        return {"crop_type": crop_type, "disease": disease}


# Create global instance
follow_up_handler = FollowUpHandler()